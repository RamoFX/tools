@import '@styles/utils/functions';

@mixin size($size) {
  height: $size;
  width: $size;
}

@mixin color($color) {
  span {
    color: $color;
  }

  .element-icon svg {
    fill: $color;
  }
}

@mixin transition($type, $properties: null) {
  @if ($type == slow) {
    transition: 500ms ease-in-out;
  } @else if ($type == normal) {
    transition: 250ms ease-in-out;
  } @else if ($type == fast) {
    transition: 125ms ease-in-out;
  }

  @if ($properties != null) {
    transition-property: $properties;
  }
}

@mixin clickableSingleProperty($color, $step, $property) {
  $colorHover: adjust-color($color, $saturation: $step, $lightness: -$step);
  $colorActive: adjust-color($color, $saturation: 2 * $step, $lightness: -2 * $step);

  & {
    #{ $property }: #{ $color };

    &:hover {
      #{ $property }: #{ $colorHover };
    }

    &:active {
      #{ $property }: #{ $colorActive };
    }
  }
}

@mixin clickable($color, $step, $oneOrMoreProperties) {
  @if (type-of($oneOrMoreProperties) == string) {
    @include clickableSingleProperty($color, $step, $oneOrMoreProperties);
  } @else if (type-of($oneOrMoreProperties) == list) {
    @each $property in $oneOrMoreProperties {
      @include clickableSingleProperty($color, $step, $property);
    }
  }
}

@mixin elevatable($color, $scaleFactor: 1) {
  $color: transparentize(darken($color, 10%), 0.25);

  & {
    box-shadow: 0 0 1rem 0 transparentize($color, 0.25);

    &:hover {
      box-shadow: scaleNumberList(0 .2rem 1rem 0 $color, $scaleFactor);
    }

    &:active {
      box-shadow: scaleNumberList(0 .5rem 2rem 0 $color, $scaleFactor);
    }
  }
}
